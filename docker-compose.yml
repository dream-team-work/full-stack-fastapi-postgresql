version: '3.8'

services:
  db:
    image: postgres:12
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432" 
    networks:
      - default
    

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.${STACK_NAME:-default}-adminer-http.rule=Host(adminer.${DOMAIN:-localhost})
      - traefik.http.routers.${STACK_NAME:-default}-adminer-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME:-default}-adminer-http.middlewares=https-redirect
      - traefik.http.routers.${STACK_NAME:-default}-adminer-https.rule=Host(adminer.${DOMAIN:-localhost})
      - traefik.http.routers.${STACK_NAME:-default}-adminer-https.entrypoints=https
      - traefik.http.routers.${STACK_NAME:-default}-adminer-https.tls=true
      - traefik.http.routers.${STACK_NAME:-default}-adminer-https.tls.certresolver=le
      - traefik.http.services.${STACK_NAME:-default}-adminer.loadbalancer.server.port=8080

  prestart:
    image: '${DOCKER_IMAGE_BACKEND:-backend}:${TAG-latest}'
    build:
      context: ./backend
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - FRONTEND_HOST=${FRONTEND_HOST:-frontend.local}
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-*}
      - SECRET_KEY=${SECRET_KEY:-secret}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:-admin123}
      - SMTP_HOST=${SMTP_HOST:-smtp.example.com}
      - SMTP_USER=${SMTP_USER:-user}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-password}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL:-noreply@example.com}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - SENTRY_DSN=${SENTRY_DSN:-}

  backend:
    image: '${DOCKER_IMAGE_BACKEND:-backend}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      db:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - FRONTEND_HOST=${FRONTEND_HOST:-frontend.local}
      - ENVIRONMENT=${ENVIRONMENT:-dev}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-*}
      - SECRET_KEY=${SECRET_KEY:-secret}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD:-admin123}
      - SMTP_HOST=${SMTP_HOST:-smtp.example.com}
      - SMTP_USER=${SMTP_USER:-user}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-password}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL:-noreply@example.com}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - SENTRY_DSN=${SENTRY_DSN:-}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5
    build:
      context: ./backend
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND:-frontend}:${TAG-latest}'
    restart: always
    networks:
      - traefik-public
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=https://api.${DOMAIN:-localhost}
        - NODE_ENV=production
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public

networks:
  traefik-public:
    external: true
  default:
    driver: bridge

volumes:
  app-db-data:
    driver: local